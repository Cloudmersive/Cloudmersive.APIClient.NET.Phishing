/*
 * phishingapi
 *
 * Easily and directly scan and block phishing security threats in input.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Cloudmersive.APIClient.NET.Phishing.Client.OpenAPIDateConverter;

namespace Cloudmersive.APIClient.NET.Phishing.Model
{
    /// <summary>
    /// Request to detect phishing from an email
    /// </summary>
    [DataContract(Name = "AdvancedEmailDetectionRequest")]
    public partial class AdvancedEmailDetectionRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdvancedEmailDetectionRequest" /> class.
        /// </summary>
        /// <param name="fromEmailAddress">Email address of the sender.</param>
        /// <param name="toEmailAddress">Email address of the recipient.</param>
        /// <param name="subject">Subject of the email.</param>
        /// <param name="htmlBody">Body of the email in HTML, or text.</param>
        /// <param name="allowLowReputationSenders">Allow email from low reputation senders and domains.</param>
        /// <param name="allowSanctioned">True to allow sanctioned countries and certain known sanctioned entities, false otherwise (default).</param>
        /// <param name="inputEmailFile">inputEmailFile.</param>
        public AdvancedEmailDetectionRequest(string fromEmailAddress = default(string), string toEmailAddress = default(string), string subject = default(string), string htmlBody = default(string), bool allowLowReputationSenders = default(bool), bool allowSanctioned = default(bool), byte[] inputEmailFile = default(byte[]))
        {
            this.FromEmailAddress = fromEmailAddress;
            this.ToEmailAddress = toEmailAddress;
            this.Subject = subject;
            this.HtmlBody = htmlBody;
            this.AllowLowReputationSenders = allowLowReputationSenders;
            this.AllowSanctioned = allowSanctioned;
            this.InputEmailFile = inputEmailFile;
        }

        /// <summary>
        /// Email address of the sender
        /// </summary>
        /// <value>Email address of the sender</value>
        [DataMember(Name = "FromEmailAddress", EmitDefaultValue = false)]
        public string FromEmailAddress { get; set; }

        /// <summary>
        /// Email address of the recipient
        /// </summary>
        /// <value>Email address of the recipient</value>
        [DataMember(Name = "ToEmailAddress", EmitDefaultValue = false)]
        public string ToEmailAddress { get; set; }

        /// <summary>
        /// Subject of the email
        /// </summary>
        /// <value>Subject of the email</value>
        [DataMember(Name = "Subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// Body of the email in HTML, or text
        /// </summary>
        /// <value>Body of the email in HTML, or text</value>
        [DataMember(Name = "HtmlBody", EmitDefaultValue = false)]
        public string HtmlBody { get; set; }

        /// <summary>
        /// Allow email from low reputation senders and domains
        /// </summary>
        /// <value>Allow email from low reputation senders and domains</value>
        [DataMember(Name = "AllowLowReputationSenders", EmitDefaultValue = true)]
        public bool AllowLowReputationSenders { get; set; }

        /// <summary>
        /// True to allow sanctioned countries and certain known sanctioned entities, false otherwise (default)
        /// </summary>
        /// <value>True to allow sanctioned countries and certain known sanctioned entities, false otherwise (default)</value>
        [DataMember(Name = "AllowSanctioned", EmitDefaultValue = true)]
        public bool AllowSanctioned { get; set; }

        /// <summary>
        /// Gets or Sets InputEmailFile
        /// </summary>
        [DataMember(Name = "InputEmailFile", EmitDefaultValue = false)]
        public byte[] InputEmailFile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AdvancedEmailDetectionRequest {\n");
            sb.Append("  FromEmailAddress: ").Append(FromEmailAddress).Append("\n");
            sb.Append("  ToEmailAddress: ").Append(ToEmailAddress).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  HtmlBody: ").Append(HtmlBody).Append("\n");
            sb.Append("  AllowLowReputationSenders: ").Append(AllowLowReputationSenders).Append("\n");
            sb.Append("  AllowSanctioned: ").Append(AllowSanctioned).Append("\n");
            sb.Append("  InputEmailFile: ").Append(InputEmailFile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
